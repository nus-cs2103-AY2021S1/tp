@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":OneShelfBookParser" as AddressBookParser LOGIC_COLOR
participant ":ItemEditCommandParser" as ItemEditCommandParser LOGIC_COLOR
participant "editItemDescriptor:EditItemDescriptor" as EditItemDescriptor LOGIC_COLOR
participant "result:ItemEditCommand" as ItemEditCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("edit-i 1 s/NTUC")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("edit-i 1 s/NTUC")
activate AddressBookParser

create ItemEditCommandParser
AddressBookParser -> ItemEditCommandParser
activate ItemEditCommandParser


ItemEditCommandParser --> AddressBookParser
deactivate ItemEditCommandParser

AddressBookParser -> ItemEditCommandParser : parse("s/NTUC")
activate ItemEditCommandParser

ref over ItemEditCommandParser : tokenize arguements

create EditItemDescriptor
ItemEditCommandParser -> EditItemDescriptor : EditItemDescriptor()
activate EditItemDescriptor

EditItemDescriptor --> ItemEditCommandParser
deactivate EditItemDescriptor

ref over ItemEditCommandParser : retrieve values and store inside editItemDescriptor

create ItemEditCommand
ItemEditCommandParser -> ItemEditCommand : ItemEditCommand(index, editItemDescriptor)
activate ItemEditCommand

ItemEditCommand --> ItemEditCommandParser : result
deactivate ItemEditCommand

ItemEditCommandParser --> AddressBookParser : result
deactivate ItemEditCommandParser
'Hidden arrow to position the destroy marker below the end of the activation bar.
ItemEditCommandParser -[hidden]-> AddressBookParser
destroy ItemEditCommandParser

AddressBookParser --> LogicManager : result
deactivate AddressBookParser

LogicManager -> ItemEditCommand : execute()
activate ItemEditCommand

ItemEditCommand -> Model : retrieve itemToEdit based on index
activate Model

Model --> ItemEditCommand : itemToEdit
deactivate Model

ItemEditCommand -> ItemEditCommand : createdEditedItem(itemToEdit, editItemDescriptor)
activate ItemEditCommand

ItemEditCommand -> ItemEditCommand : editedItem
deactivate ItemEditCommand

ItemEditCommand -> Model : setItem(editedItem)
activate Model

Model --> ItemEditCommand
deactivate Model

create CommandResult
ItemEditCommand -> CommandResult
activate CommandResult

CommandResult --> ItemEditCommand
deactivate CommandResult

ItemEditCommand --> LogicManager : result
deactivate ItemEditCommand

[<--LogicManager
deactivate LogicManager

@enduml
