@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":CanoeCoachParser" as CanoeCoachParser LOGIC_COLOR
participant ":AddAllStudentCommandParser" as AddAllStudentCommandParser LOGIC_COLOR
participant "c:AddAllStudentToTrainingCommand" as AddAllStudentToTrainingCommand LOGIC_COLOR
participant "r:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute(ts-addall)
activate LogicManager

LogicManager -> CanoeCoachParser : parseCommand(ts-addall)
activate CanoeCoachParser

create AddAllStudentCommandParser
CanoeCoachParser -> AddAllStudentCommandParser
activate AddAllStudentCommandParser

AddAllStudentCommandParser --> CanoeCoachParser
deactivate AddAllStudentCommandParser

CanoeCoachParser -> AddAllStudentCommandParser : parse("1")
activate AddAllStudentCommandParser

create AddAllStudentToTrainingCommand
AddAllStudentCommandParser -> AddAllStudentToTrainingCommand
activate AddAllStudentToTrainingCommand

AddAllStudentToTrainingCommand --> AddAllStudentCommandParser
deactivate AddAllStudentToTrainingCommand

AddAllStudentCommandParser --> CanoeCoachParser : c
deactivate AddAllStudentCommandParser
AddAllStudentCommandParser -[hidden]-> CanoeCoachParser
destroy AddAllStudentCommandParser

CanoeCoachParser --> LogicManager : c
deactivate CanoeCoachParser

LogicManager -> AddAllStudentToTrainingCommand : execute(model)
activate AddAllStudentToTrainingCommand

AddAllStudentToTrainingCommand -> Model : getFilteredStudentList()
activate Model
Model --> AddAllStudentToTrainingCommand
deactivate Model

AddAllStudentToTrainingCommand -> Model : getFilteredTrainingList()
activate Model
Model --> AddAllStudentToTrainingCommand
deactivate Model

loop all students
    alt student can be added to training
        AddAllStudentToTrainingCommand -> Model : setStudentInUniqueList(student)
        activate Model
        Model --> AddAllStudentToTrainingCommand
        deactivate Model
    AddAllStudentToTrainingCommand -> Model : setTraining(training)
    activate Model
    Model --> AddAllStudentToTrainingCommand
    deactivate Model
    end
end

create CommandResult
AddAllStudentToTrainingCommand -> CommandResult
activate CommandResult

CommandResult --> AddAllStudentToTrainingCommand
deactivate CommandResult

AddAllStudentToTrainingCommand--> LogicManager : r
deactivate AddAllStudentToTrainingCommand

[<--LogicManager
deactivate LogicManager
@enduml
