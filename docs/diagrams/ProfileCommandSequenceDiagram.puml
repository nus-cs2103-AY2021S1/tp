@startuml
skinparam defaultFontSize 20
!include style.puml
box UI UI_COLOR_T1
participant ":MainWindow" as MainWindow UI_COLOR
participant ":ProfileWindow" as ProfileWindow UI_COLOR
end box

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":CliniCalParser" as CliniCalParser LOGIC_COLOR
participant ":ProfileCommandParser" as ProfileCommandParser LOGIC_COLOR
participant "p:ProfileCommand" as ProfileCommand LOGIC_COLOR
participant "r:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
end box

[--> MainWindow : executeCommand(commandText)
activate MainWindow

MainWindow -> LogicManager : execute("profile 1")
activate LogicManager

LogicManager -> CliniCalParser : parseCommand("profile 1")
activate CliniCalParser

create ProfileCommandParser
CliniCalParser -> ProfileCommandParser
activate ProfileCommandParser

ProfileCommandParser -> ProfileCommandParser : parse("profile 1")
activate ProfileCommandParser

ProfileCommandParser <-- ProfileCommandParser : patientIndex
deactivate ProfileCommandParser

create ProfileCommand
ProfileCommandParser -> ProfileCommand : ProfileCommand(patientIndex)
activate ProfileCommand

ProfileCommand --> ProfileCommandParser : p
deactivate ProfileCommand

ProfileCommandParser --> CliniCalParser : p
deactivate ProfileCommandParser

CliniCalParser --> LogicManager : p
deactivate CliniCalParser
destroy ProfileCommandParser

LogicManager -> ProfileCommand : execute()
activate ProfileCommand

ProfileCommand -> Model : getFilteredPatientList()
activate Model

ProfileCommand <-- Model: ObservableList<Patient>
deactivate Model

create CommandResult
ProfileCommand -> CommandResult : CommandResult(patient)
activate CommandResult

ProfileCommand <-- CommandResult : r
deactivate CommandResult

ProfileCommand --> LogicManager : r
deactivate ProfileCommand

LogicManager --> MainWindow : r
deactivate LogicManager
destroy ProfileCommand

MainWindow -> CommandResult : getPatientProfile()
activate CommandResult

MainWindow <-- CommandResult : patient
deactivate CommandResult

MainWindow -> ProfileWindow : setup(r)
destroy CommandResult
activate ProfileWindow

MainWindow <-- ProfileWindow


MainWindow -> MainWindow : handleProfilePanel()
activate MainWindow

MainWindow <-- MainWindow :
deactivate MainWindow

MainWindow -> ProfileWindow : show()
MainWindow <-- ProfileWindow
deactivate ProfileWindow

[<--MainWindow
deactivate MainWindow

@enduml
