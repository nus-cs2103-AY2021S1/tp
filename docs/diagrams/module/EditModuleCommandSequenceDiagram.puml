@startuml
!include ../style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":ModuleListParser" as ModuleListParser LOGIC_COLOR
participant ":EditModuleParser" as EditModuleParser LOGIC_COLOR
participant "c:EditModuleCommand" as EditModuleCommand LOGIC_COLOR
participant "r:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute(editmodule)
activate LogicManager

LogicManager -> ModuleListParser : parseCommand(editmodule)
activate ModuleListParser

create EditModuleParser
ModuleListParser -> EditModuleParser
activate EditModuleParser

EditModuleParser --> ModuleListParser
deactivate EditModuleParser

ModuleListParser -> EditModuleParser :parse(commandArgument)
activate EditModuleParser

ref over EditModuleParser: Create EditModuleDescriptor to store edited module details

create EditModuleCommand
EditModuleParser -> EditModuleCommand
activate EditModuleCommand

EditModuleCommand --> EditModuleParser: c
deactivate EditModuleCommand

EditModuleParser --> ModuleListParser: c
deactivate EditModuleParser

EditModuleParser -[hidden]-> EditModuleCommand
destroy EditModuleParser

ModuleListParser --> LogicManager: c
deactivate ModuleListParser

LogicManager -> EditModuleCommand : execute(model)
activate EditModuleCommand

EditModuleCommand -> Model : setModule(targetModule, editedModule)
activate Model

Model --> EditModuleCommand
deactivate Model

create CommandResult
EditModuleCommand -> CommandResult
activate CommandResult

CommandResult --> EditModuleCommand: r
deactivate CommandResult

EditModuleCommand --> LogicManager: r
deactivate EditModuleCommand

EditModuleCommand -[hidden]-> LogicManager
destroy EditModuleCommand

[<--LogicManager
deactivate LogicManager
@enduml
