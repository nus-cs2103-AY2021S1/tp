@startuml
!include style.puml
skinparam ParticipantFontSize 30
skinparam ArrowFontSize 30
skinparam defaultFontSize 30

box LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":ProductiveNusParser" as ProductiveNusParser LOGIC_COLOR
participant ":RemindCommandParser" as RemindCommandParser LOGIC_COLOR
participant ":RemindCommand" as RemindCommand LOGIC_COLOR
participant ":CommandLogic" as CommandLogic LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("remind 1 3")
activate LogicManager

LogicManager -> ProductiveNusParser : parseCommand("remind 1 3")
activate ProductiveNusParser

create RemindCommandParser
ProductiveNusParser -> RemindCommandParser
activate RemindCommandParser

RemindCommandParser --> ProductiveNusParser
deactivate RemindCommandParser

ProductiveNusParser -> RemindCommandParser : parse("1 3")
activate RemindCommandParser

create RemindCommand
RemindCommandParser -> RemindCommand : RemindCommand(parsedIndexes)
activate RemindCommand

RemindCommand --> RemindCommandParser
deactivate RemindCommand

RemindCommandParser --> ProductiveNusParser
deactivate RemindCommandParser
'Hidden arrow to position the destroy marker below the end of the activation bar.
RemindCommandParser -[hidden]-> ProductiveNusParser
destroy RemindCommandParser

ProductiveNusParser --> LogicManager
deactivate ProductiveNusParser

LogicManager -> RemindCommand : execute()
activate RemindCommand

RemindCommand -> CommandLogic : checkForDuplicatedIndexes([1 3])
activate CommandLogic

CommandLogic --> RemindCommand
deactivate CommandLogic

RemindCommand -> CommandLogic : checkForInvalidIndexes([1 3])
activate CommandLogic

CommandLogic --> RemindCommand
deactivate CommandLogic



loop 2 times
    RemindCommand -> Model : get
    activate Model
    Model --> RemindCommand : assignmentToRemind
    deactivate Model

    RemindCommand -> Model : setAssignment(assignmentToRemind, remindedAssignment)
    activate Model
    Model --> RemindCommand
    deactivate Model
end

create CommandResult
RemindCommand -> CommandResult : CommandResult(assignmentsToRemind)
activate CommandResult

CommandResult --> RemindCommand
deactivate CommandResult

RemindCommand --> LogicManager : result
deactivate RemindCommand

[<--LogicManager
deactivate LogicManager
@enduml
