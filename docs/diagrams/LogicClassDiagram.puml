@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class MainParser
Class ABCItemCommandParser
Class ABCCommandParser
Class XYZCliSyntax
Class XYZParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class "{abstract}\nABCCommand" as ABCCommand
Class ABCItemCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
Class "CommandUtil" as CommandUtil
}

Interface Logic <<Interface>>
Class LogicManager
}

package Model{
Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .up.|> Logic
LogicManager -->"1" MainParser
MainParser .left.> ABCCommandParser: creates >
ABCCommandParser .down.> ABCItemCommandParser: creates >

ABCItemCommandParser ..> ABCItemCommand : creates >
ABCCommandParser ..|> Parser
ABCItemCommandParser ..|> Parser
ABCItemCommandParser ..> ArgumentMultimap
ABCItemCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
ABCItemCommandParser ..> XYZCliSyntax
XYZCliSyntax ..> Prefix
ABCItemCommandParser ..> XYZParserUtil
XYZParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
ABCCommand -up-|> Command
ABCItemCommand -up-|> ABCCommand
ABCItemCommand -left..-> CommandUtil
LogicManager .left.> Command : executes >

note top of XYZCliSyntax: XYZCliSyntax = \nProfileCliSyntax,\nGeneralCliSyntax, etc \n(Same definition of XYZ \nused for XYZParserUtil)

LogicManager --> Model
Command .right.> Model
note right of ABCItemCommand: ABCItemCommand = \nAddProfileCommand, \nViewCompanyCommand, etc

Logic ..> CommandResult
LogicManager .down.> CommandResult
Command .up.> CommandResult
CommandResult -[hidden]-> Parser
@enduml
