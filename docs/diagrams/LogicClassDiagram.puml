@startuml
!include style.puml

'scale 1.5

skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class XYZBookParser
Class ABCCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class ABCCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
}

Interface LogicXYZ <<Interface>>
Class LogicXYZManager

Interface LogicDispatcher <<Interface>>
Class LogicDispatcherManager

note top of ABCCommandParser: ABC = Add, Find,\nDelete, etc
note top of XYZBookParser: XYZ = Deliverable, \nMeeting or Person

}

package Model{
class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> LogicDispatcher

LogicDispatcherManager .up.|> LogicDispatcher
XYZBookParser .left.> ABCCommandParser: creates >

ABCCommandParser ..> ABCCommand : creates >
ABCCommandParser ..|> Parser
ABCCommandParser ..> ArgumentMultimap
ABCCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
ABCCommandParser ..> CliSyntax
CliSyntax ..> Prefix
ABCCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
ABCCommand -up-|> Command
LogicDispatcherManager .left.> Command : executes >
LogicDispatcherManager -> "0..1      " Model
LogicDispatcherManager ---> "0..1    " ABCCommandParser

Command .> "0..1  " Model

LogicDispatcher ..> CommandResult
LogicDispatcherManager .down.> CommandResult
Command .up.> CommandResult
CommandResult -[hidden]-> Parser

LogicXYZ ..> LogicXYZManager
LogicDispatcherManager -left-> LogicXYZManager
LogicXYZManager -> XYZBookParser
@enduml
