@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class AddressBookParser
package "ABC" as DEF {
Class XYZ_ABC_CommandParser
}
Class "{abstract}\nXYZ_CommandParser" as XYZ_CommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
package ABC {
Class XYZ_ABC_Command
}
Class "{abstract}\nXYZ_Command" as XYZ_Command
Class CommandResult
Class "{abstract}\nCommand" as Command
}

Interface Logic <<Interface>>
Class LogicManager
}

package Model{
Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

note "XYZ represents types of commands such as\nAdd, Edit, Delete, Find, etc\n\nABC represents \nentities such as Client, Hairdresser and Appointment" as N1

LogicManager .up.|> Logic
LogicManager -->"1" AddressBookParser
AddressBookParser ..> XYZ_ABC_CommandParser: creates >
XYZ_ABC_CommandParser --|> XYZ_CommandParser
AddressBookParser -right[hidden]- CommandResult

XYZ_CommandParser ..> XYZ_ABC_Command : creates >
XYZ_CommandParser .|> Parser
XYZ_CommandParser ..> ArgumentMultimap
XYZ_CommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
XYZ_CommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZ_CommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
XYZ_Command -up-|> Command
XYZ_ABC_Command -up-|> XYZ_Command
LogicManager .left.> Command : executes >
note left of XYZ_ABC_CommandParser: Eg, AddClientCommandParser

LogicManager --> Model
Command .up.> Model
note left of XYZ_Command: XYZ_Command = AddCommand, \nFindCommand, etc
note right of XYZ_ABC_Command: Assuming XYZ = Add, \nXYZ_ABC_Command = AddClientCommand, \nAddHairdresserCommand, \nAddAppointmentCommand, etc

Logic ..> CommandResult
LogicManager .down.> CommandResult
Command .up.> CommandResult
CommandResult -[hidden]-> Parser
@enduml
