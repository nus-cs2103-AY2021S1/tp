@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR
skinparam DefaultFontSize 30

package Logic {

package Parser {
Interface Parser <<Interface>>
Class OneShelfBookParser
Class XYZCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class ItemXYZCommand
Class DeliveryXYZCommand
Class HelpXYZCommand
Class XYZCommand
Class CommandResult
Class HelpCommandResult
Class "{abstract}\nCommand" as Command
Class "{abstract}\nItemCommand" as ItemCommand
Class "{abstract}\nDeliveryCommand" as DeliveryCommand
Class "{abstract}\nHelpCommand" as HelpCommand
}

note bottom of XYZCommand: XYZCommand = UndoCommand, \nRedoCommand etc
note bottom of DeliveryXYZCommand: DeliveryXYZCommand = DeliveryAddCommand, \nDeliveryListCommand etc
note bottom of ItemXYZCommand:  ItemXYZCommand = ItemAddCommand, \nItemListCommand etc
note bottom of HelpXYZCommand: HelpXYZCommand = HelpStartCommand, \nHelpSummaryCommand etc

Interface Logic <<Interface>>
Class LogicManager
}

package Model {
Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .up.|> Logic
LogicManager -->"1" OneShelfBookParser
OneShelfBookParser .left.> XYZCommandParser: creates >

XYZCommandParser ..|> Parser
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix

XYZCommandParser ..> ItemXYZCommand : creates >
ItemXYZCommand -up-|> ItemCommand
ItemCommand -up-|> Command

XYZCommandParser ..> DeliveryXYZCommand : creates >
DeliveryXYZCommand -up-|> DeliveryCommand
DeliveryCommand -up-|> Command

XYZCommandParser ..> HelpXYZCommand : creates >
HelpXYZCommand -up-|> HelpCommand
HelpCommand -up-|> Command

XYZCommandParser ..> XYZCommand : creates >
XYZCommand -up-|> Command

HelpCommandResult -up-|> CommandResult

LogicManager .....> Command : executes >

LogicManager --> Model
Command .right.> Model

Logic ..> CommandResult
LogicManager .down.> CommandResult
Command .right.> CommandResult
CommandResult -[hidden]-> Parser

XYZCommand -[hidden]-> ItemXYZCommand
@enduml
