@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class ProjectBookParser
Class XYZCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class XYZCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
note bottom of XYZCommand: XYZCommand = AddCommand, \nFindCommand, etc
}

package Statistic {
Interface StatisticGenerator <<Interface>>
Class StatisticManager
Class XYZStatistic
Class CommandResult
Class StatisticEntry
Class "{abstract}\nStatistic" as Statistic
note top of XYZStatistic: XYZStatistic = \nPeriodicTotalTimeStatistic, etc
}

Interface Logic <<Interface>>
Class LogicManager
}

package Model{
Class HiddenModel #FFFFFF
}

package Storage{
Class HiddenStorage #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .up.|> Logic
LogicManager -->"1" ProjectBookParser
LogicManager -right->"1" StatisticGenerator
ProjectBookParser .left.> XYZCommandParser: creates >

XYZCommandParser ..> XYZCommand : creates >
XYZCommandParser ..|> Parser
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
XYZCommand -up-|> Command
LogicManager .left.> Command : executes >

LogicManager -up-> Storage
LogicManager --> Model
Command .up.> Model

Logic ..> CommandResult
LogicManager .down.> CommandResult
Command .up.> CommandResult
CommandResult -[hidden]-> Parser

StatisticManager .up.|> StatisticGenerator
StatisticManager --> "*" Statistic
Statistic ..> "1..*" StatisticEntry
XYZStatistic --|> Statistic

@enduml
